task1
INPUT:-
import React, { useState } from "react";
const App = () => {
const [tasks, setTasks] = useState([]);
const [newTask, setNewTask] = useState("");
// Function to add a new task
const addTask = () => {
if (newTask.trim() !== "") {
setTasks([...tasks, newTask]);
setNewTask(""); // Clear input field
}
};
// Function to remove a task by index
const removeTask = (index) => {
setTasks(tasks.filter((_, i) => i !== index));
return (
<div style={styles.container}>
<h1 style={styles.title}>To-Do List</h1>
<div style={styles.inputContainer}>
<input
type="text"
value={newTask}
onChange={(e) => setNewTask(e.target.value)}
placeholder="Add a new task"
style={styles.input}
/>
<button onClick={addTask} style={styles.addButton}>
Add Task
</button>
</div>
{/* Conditional Rendering */}
{tasks.length === 0 ? (
<p style={styles.emptyMessage}>No tasks available. Add a task to get started!</p>
) : (
<ul style={styles.taskList}>
{tasks.map((task, index) => (
<li key={index} style={styles.taskItem}>
<span>{task}</span>
<button onClick={() => removeTask(index)} style={styles.removeButton}>
Remove
</button>
</li>
))}
</ul>
)}
</div>
);
}
// Inline SS styles
const styles = {
container: {
fontFamily: "Arial, sans-serif",
backgroundColor: "#f4f4f4",
padding: "20px",
width: "350px",
borderRadius: "10px",
boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.2)",
textAlign: "center",
margin: "50px auto",
},
title: {
marginBottom: "15px",
color: "#333",
},
inputContainer: {
display: "flex",
gap: "10px",
},
input: {
flex: "1",
padding: "8px",
border: "2px solid #3498db",
borderRadius: "5px",
outline: "none",
},
addButton: {
backgroundColor: "#2ecc71",
color: "white",
border: "none",
padding: "8px 12px",
borderRadius: "5px",
cursor: "pointer",
transition: "background 0.3s",
},
emptyMessage: {
color: "#777",
fontStyle: "italic",
marginTop: "10px",
},
taskList: {
listStyle: "none",
padding: "0",
marginTop: "15px",
},
taskItem: {
display: "flex",
justifyContent: "space-between",
alignItems: "center",
padding: "10px",
margin: "5px 0",
background: "#ecf0f1",
borderRadius: "5px",
boxShadow: "2px 2px 5px rgba(0, 0, 0, 0.1)",
},
removeButton: {
backgroundColor: "#e74c3c",
color: "white",
border: "none",
padding: "5px 10px",
borderRadius: "3px",
cursor: "pointer",
},
};
export default App;
task2
INPUT:-
import React, { useState } from "react";
const App = () => {
// State variables for form inputs
const [name, setName] = useState("");
const [email, setEmail] = useState("");
const [message, setMessage] = useState("");
const [submittedData, setSubmittedData] = useState(null);
const [errors, setErrors] = useState({});
// Function to validate the form inputs
const validateForm = () => {
const newErrors = {};
if (!name.trim()) newErrors.name = "Name is required.";
if (!email.trim()) newErrors.email = "Email is required.";
else if (!/\S+@\S+\.\S+/.test(email)) newErrors.email = "Invalid email format.";
if (!message.trim()) newErrors.message = "Feedback message is required.";
return newErrors;
};
// Function to handle form submission
const handleSubmit = (e) => {
e.preventDefault();
const validationErrors = validateForm();
if (Object.keys(validationErrors).length === 0) {
// If no errors, submit the form
setSubmittedData({ name, email, message });
setName("");
setEmail("");
setMessage("");
setErrors({});
} else {
// If there are errors, set them in state
setErrors(validationErrors);
}
};
return (
<div style={styles.container}>
<h1 style={styles.heading}>Feedback Form</h1>
<form onSubmit={handleSubmit} style={styles.form}>
<div style={styles.inputContainer}>
<label style={styles.label}>Name:</label>
<input
type="text"
value={name}
onChange={(e) => setName(e.target.value)}
style={styles.input}
/>
{errors.name && <p style={styles.error}>{errors.name}</p>}
</div>
<div style={styles.inputContainer}>
<label style={styles.label}>Email:</label>
<input
type="email"
value={email}
onChange={(e) => setEmail(e.target.value)}
style={styles.input}
/>
{errors.email && <p style={styles.error}>{errors.email}</p>}
</div>
<div style={styles.inputContainer}>
<label style={styles.label}>Feedback Message:</label>
<textarea
value={message}
onChange={(e) => setMessage(e.target.value)}
style={styles.textarea}
/>
{errors.message && <p style={styles.error}>{errors.message}</p>}
</div>
<button type="submit" style={styles.submitButton}>
Submit </button>
</form>
{/* Display submitted feedback data */}
{submittedData && (
<div style={styles.feedbackContainer}>
<h2 style={styles.feedbackHeading}>Submitted Feedback:</h2>
<p><strong>Name:</strong> {submittedData.name}</p>
<p><strong>Email:</strong> {submittedData.email}</p>
<p><strong>Message:</strong> {submittedData.message}</p>
</div>
)}
</div>
);
};
// Inline CSS styles (Baby Pink Theme)
const styles = {
container: {
fontFamily: "Arial, sans-serif",
backgroundColor: "#ffebef", // Baby Pink Background
padding: "30px",
maxWidth: "450px",
borderRadius: "15px",
boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.1)",
textAlign: "center",
margin: "50px auto",
},
heading: {
color: "#d63384", // Soft Pink Heading
},
form: {
display: "flex",
flexDirection: "column",
gap: "15px",
},
inputContainer: {
textAlign: "left",
},
label: {
fontWeight: "bold",
color: "#333",
display: "block",
marginBottom: "5px",
},
input: {
width: "100%",
padding: "10px",
border: "2px solid #d63384",
borderRadius: "5px",
outline: "none",
backgroundColor: "#fff5f7", // Light Pink Input
},
textarea: {
width: "100%",
padding: "10px",
border: "2px solid #d63384",
borderRadius: "5px",
outline: "none",
height: "100px",
backgroundColor: "#fff5f7", // Light Pink Textarea
},
submitButton: {
backgroundColor: "#d63384",
color: "white",
border: "none",
padding: "12px",
borderRadius: "5px",
cursor: "pointer",
transition: "background 0.3s",
},
error: {
color: "#ff4d4d",
fontSize: "14px",
marginTop: "5px",
},
feedbackContainer: {
marginTop: "20px",
padding: "15px",
backgroundColor: "#fff",
borderRadius: "5px",
boxShadow: "2px 2px 5px rgba(0, 0, 0, 0.1)",
},
feedbackHeading: {
color: "#d63384",
},
};
export default App;
